>>> while 1:
...    print 'Type Ctrl-C to stop me!'

>>> x = 'spam'
>>> while x:
...     print x,
...     x = x[1:]      # strip first character off x
...
spam pam am m

>>> a=0; b=10
>>> while a < b:       # one way to code counter loops
...     print a,
...     a += 1         # or, a = a+1
...
0 1 2 3 4 5 6 7 8 9




while 1: pass   # type Ctrl-C to stop me!

x = 10
while x:
    x = x-1                   # or, x -= 1
    if x % 2 != 0: continue   # odd?--skip print
    print x,

x = 10
while x:
    x = x-1
    if x % 2 == 0:            # even ?-- print
        print x,

>>> while 1:
...     name = raw_input('Enter name:')
...     if name == 'stop': break
...     age  = raw_input('Enter age: ')
...     print 'Hello', name, '=>', int(age) ** 2
...
Enter name:mel
Enter age: 40
Hello mel => 1600
Enter name:bob
Enter age: 30
Hello bob => 900
Enter name:stop 


x = y / 2                          # for some y > 1
while x > 1:
    if y % x == 0:                 # remainder
        print y, 'has factor', x
        break                      # skip else
    x = x-1
else:                              # normal exit
    print y, 'is prime'





found = 0
while x and not found:
    if match(x[0]):              # value at front?
        print 'Ni'
        found = 1
    else:
        x = x[1:]                # slice off front and repeat
if not found:
    print 'not found'


while x:                         # exit when x empty
    if match(x[0]):
        print 'Ni'
        break                    # exit, go around else
    x = x[1:]
else:
    print 'Not found'            # only here is exhausted x


for x in mylist:                 # iterate over x's items
    if match(x):
        print 'Ni'
        break                    # exit, go around else
else:
    print 'not found'





>>> for x in ["spam", "eggs", "ham"]:
...     print x,
...
spam eggs ham

>>> sum = 0
>>> for x in [1, 2, 3, 4]:
...     sum = sum + x
...
>>> sum
10
>>> prod = 1
>>> for item in [1, 2, 3, 4]: prod *= item
...
>>> prod
24

>>> S, T = "lumberjack", ("and", "I'm", "okay")

>>> for x in S: print x,
...
l u m b e r j a c k

>>> for x in T: print x,
...
and I'm okay

>>> T = [(1, 2), (3, 4), (5, 6)]
>>> for (a, b) in T:                   # tuple assignment at work
...     print a, b
...
1 2
3 4
5 6


>>> items = ["aaa", 111, (4, 5), 2.01]          # a set of objects
>>> tests = [(4, 5), 3.14]                      # keys to search for
>>>
>>> for key in tests:                           # for all keys
...     for item in items:                      # for all items
...         if item == key:                     # check for match
...             print key, "was found"
...             break
...     else:
...         print key, "not found!"
...
(4, 5) was found
3.14 not found!


>>> for key in tests:                    # for all keys
...     if key in items:                 # let Python check for a match
...         print key, "was found"
...     else:
...         print key, "not found!"
...
(4, 5) was found
3.14 not found!


>>> seq1 = "spam"
>>> seq2 = "scam"
>>>
>>> res = []                     # start empty
>>> for x in seq1:               # scan first sequence
...     if x in seq2:            # common item?
...         res.append(x)        # add to result end
...
>>> res
['s', 'a', 'm']





file = open('test.txt', 'r')
print file.read()

while 1:
    char = file.read(1)          # read by character
    if not char: break
    print char,

for char in open('test.txt').read(): 
    print char

file = open('test.txt')
while 1:
    line = file.readline()       # read line by line
    if not line: break
    print line,

file = open('test.txt', 'rb')
while 1:
    chunk = file.read(10)        # read byte chucks
    if not chunk: break
    print chunk,

for line in open('test.txt').readlines(): print line
for line in open('test.txt').xreadlines():print line
for line in open('test.txt'):             print line




>>> range(5), range(2, 5), range(0, 10, 2)
([0, 1, 2, 3, 4], [2, 3, 4], [0, 2, 4, 6, 8])

>>> range(-5, 5)
[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]

>>> range(5, -5, -1)
[5, 4, 3, 2, 1, 0, -1, -2, -3, -4]	

>>> for i in range(3):
...     print i, 'Pythons'
...
0 Pythons
1 Pythons
2 Pythons

>>> X = 'spam'
>>> for item in X: print item,            # simple iteration
...
s p a m

>>> i = 0
>>> while i < len(X):                     # while loop iteration
...     print X[i],; i += 1
...
s p a m

>>> X
'spam'
>>> len(X)                                # length of string
4
>>> range(len(X))                         # all legal offsets into X
[0, 1, 2, 3]
>>>
>>> for i in range(len(X)): print X[i],   # manual for indexing
...
s p a m





>>> S = 'abcdefghijk'
>>> range(0, len(S), 2)
[0, 2, 4, 6, 8, 10]

>>> for i in range(0, len(S), 2): print S[i],
...
a c e g i k




>>> L = [1, 2, 3, 4, 5]
>>>
>>> for i in range(len(L)):          # add on to each item in L
...     L[i] += 1                    # or L[i] = L[i] + 1
...
>>> L
[2, 3, 4, 5, 6]


>>> i = 0
>>> while i < len(L):
...     L[i] += 1
...     i += 1
...
>>> L
[3, 4, 5, 6, 7]




>>> L1 = [1,2,3,4]
>>> L2 = [5,6,7,8]

>>> zip(L1,L2)
[(1, 5), (2, 6), (3, 7), (4, 8)]

>>> for (x,y) in zip(L1, L2):
...     print x, y, '--', x+y
...
1 5 -- 6
2 6 -- 8
3 7 -- 10
4 8 – 12

>>> T1, T2, T3 = (1,2,3), (4,5,6), (7,8,9)
>>> T3
(7, 8, 9)
>>> zip(T1,T2,T3)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]

>>> S1 = 'abc'
>>> S2 = 'xyz123'
>>>
>>> zip(S1, S2)
[('a', 'x'), ('b', 'y'), ('c', 'z')]

>>> map(None, S1, S2)
[('a', 'x'), ('b', 'y'), ('c', 'z'), (None, '1'), (None, '2'), (None,'3')]





>>> D1 = {'spam':1, 'eggs':3, 'toast':5}
>>> D1
{'toast': 5, 'eggs': 3, 'spam': 1}

>>> D1 = {}
>>> D1['spam']  = 1
>>> D1['eggs']  = 3
>>> D1['toast'] = 5

>>> keys = ['spam', 'eggs', 'toast']
>>> vals = [1, 3, 5]

>>> zip(keys, vals)
[('spam', 1), ('eggs', 3), ('toast', 5)]

>>> D2 = {}
>>> for (k, v) in zip(keys, vals): D2[k] = v
...
>>> D2
{'toast': 5, 'eggs': 3, 'spam': 1}

>>> keys = ['spam', 'eggs', 'toast']
>>> vals = [1, 3, 5]

>>> D3 = dict(zip(keys, vals))
>>> D3
{'toast': 5, 'eggs': 3, 'spam': 1}

