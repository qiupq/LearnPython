>>> nudge = 1
>>> wink  = 2
>>> A, B = nudge, wink             # tuple assignment
>>> A, B                           # like A=nudge; B=wink
(1, 2)
>>> [C, D] = [nudge, wink]         # list assignment
>>> C, D
(1, 2)

>>> nudge = 1
>>> wink  = 2
>>> nudge, wink = wink, nudge      # tuples: swaps values
>>> nudge, wink                    # like T=nudge; nudge=wink; wink=T
(2, 1)

>>> [a, b, c] = (1, 2, 3)
>>> a, c
(1, 3)
>>> (a, b, c) = "ABC"
>>> a, c
('A', 'C')

>>> red, green, blue = range(3)
>>> red, blue
(0, 2)

>>> range(3)
[0, 1, 2]




>>> x = 0            # x bound to an integer object
>>> x = "Hello"      # now it's a string
>>> x = [1, 2, 3]    # and now it's a list




>>> x = 1
>>> x = x + 1          # traditional
>>> x
2
>>> x += 1             # augmented
>>> x
3

>>> S = "spam"
>>> S += "SPAM"        # implied concatenation
>>> S
'spamSPAM'

>>> L = [1, 2]
>>> L = L + [3]            # concatenate: slower
>>> L
[1, 2, 3]
>>> L.append(4)            # faster, but in-place
>>> L
[1, 2, 3, 4]

>>> L = L + [5, 6]         # concatenate: slower
>>> L
[1, 2, 3, 4, 5, 6]
>>> L.extend([7, 8])       # faster, but in-place
>>> L
[1, 2, 3, 4, 5, 6, 7, 8]

>>> L += [9, 10]       # mapped to L.extend([9, 10])
>>> L
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]




>>> x = 'a'
>>> y = 'b'
>>> print x, y
a b

>>> print x + y
ab
>>> print '%s...%s' % (x, y)
a...b

>>> print 'hello world'                 # print a string object
hello world

>>> 'hello world'                       # interactive echoes
'hello world'

>>> import sys                          # printing the hard way
>>> sys.stdout.write('hello world\n')
hello world




print X

import sys
sys.stdout.write(str(X) + '\n')

import sys
sys.stdout = open('log.txt', 'a')     # redirects prints to file
...
print x, y, x                         # shows up in log.txt

import sys
temp = sys.stdout                     # save for restoring
sys.stdout = open('log.txt', 'a')     # redirects prints to file
...
print x, y, x                         # print to file
... 
sys.stdout = temp
print a, b, c                         # print to original stdout

log =  open('log.txt', 'a')     
print >> log, x, y, z                 # print to a file-like object
print a, b, c                         # print to original stdout




class FileFaker:
    def write(self, string):
        # do something with the string

import sys
sys.stdout = FileFaker()
print someObjects         # sends to the class write method

myobj = FileFaker()
print >> myobj, someObjects   # does not reset sys.stdout





