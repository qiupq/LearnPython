% python
>>> a = 3           # name created
>>> b = 4

>>> a + 1, a – 1        # addition (3+1), subtraction (3-1)
(4, 2)

>>> b * 3, b / 2        # multiplication (4*3), division (4/2)
(12, 2)

>>> a % 2, b ** 2       # modulus (remainder), power 
(1, 16)

>>> 2 + 4.0, 2.0 ** b   # mixed-type conversions
(6.0, 16.0)

>>> c * 2
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
NameError: name 'c' is not defined

>>> b / 2 + a             # same as ((4 / 2) + 3)
5
>>> print b / (2.0 + a)   # same as (4 / (2.0 + 3))
0.8

>>> b / (2.0 + a)            # auto echo output: more digits
0.80000000000000004

>>> print b / (2.0 + a)      # print rounds off digits
0.8




>>> 1 / 2.0
0.5

>>> num = 1 / 3.0
>>> num                     # echoes
0.33333333333333331
>>> print num               # print rounds
0.333333333333

>>> "%e" % num              # string formatting
'3.333333e-001'
>>> "%2.2f" % num           # string formatting
'0.33'

>>> repr(num)               # used by echoes: as code form
'0.33333333333333331'
>>> str(num)                # used by print: user-friendly form
'0.333333333333'




>>> (5 / 2), (5 / 2.0), (5 / -2.0), (5 / -2)
(2, 2.5, -2.5, -3)

>>> (5 // 2), (5 // 2.0), (5 // -2.0), (5 // -2)
(2, 2.0, -3.0, -3)

>>> (9 / 3), (9.0 / 3), (9 // 3), (9 // 3.0)
(3, 3.0, 3, 3.0)




>>> from __future__ import division

>>> (5 / 2), (5 / 2.0), (5 / -2.0), (5 / -2)
(2.5, 2.5, -2.5, -2.5)

>>> (5 // 2), (5 // 2.0), (5 // -2.0), (5 // -2)
(2, 2.0, -3.0, -3)

>>> (9 / 3), (9.0 / 3), (9 // 3), (9 // 3.0)
(3.0, 3.0, 3, 3.0)




>>> x = 1        # 0001
>>> x << 2       # shift left 2 bits: 0100
4
>>> x | 2        # bitwise OR: 0011
3
>>> x & 1        # bitwise AND: 0001
1




>>> 9999999999999999999999999999999999999L + 1
10000000000000000000000000000000000000L

>>> 9999999999999999999999999999999999999 + 1
10000000000000000000000000000000000000L

>>> 2L ** 200
1606938044258990275541962092341162602522202993782792835301376L
>>>
>>> 2 ** 200
1606938044258990275541962092341162602522202993782792835301376L




>>> 1j * 1J
(-1+0j)
>>> 2 + 1j * 3
(2+3j)
>>> (2+1j)*3
(6+3j)




>>> 01, 010, 0100              # octal literals
(1, 8, 64)
>>> 0x01, 0x10, 0xFF           # hex literals
(1, 16, 255)

>>> oct(64), hex(64), hex(255)
('0100', '0x40', '0xff')

>>> int('0100'), int('0100', 8), int('0x40', 16)
(100, 64, 64)

>>> eval('100'), eval('0100'), eval('0x40')
(100, 64, 64)

>>> "%o %x %X" % (64, 64, 255)
'100 40 FF'




>>> import math
>>> math.pi, math.e
(3.1415926535897931, 2.7182818284590451)

>>> math.sin(2 * math.pi / 180)
0.034899496702500969

>>> abs(-42), 2**4, pow(2, 4)
(42, 16, 16)

>>> int(2.567), round(2.567), round(2.567, 2)
(2, 3.0, 2.5699999999999998)




>>> a = 3
>>> b = a
>>> a = 'spam'

>>> a = 3
>>> b = a
>>> a = 5

>>> L1 = [2,3,4]
>>> L2 = L1
>>> L1[0] = 24
>>> L2
[24, 3, 4]

>>> x = 42
>>> x = 'shrubbery'     # reclaim 42 now (?)
>>> x = 3.1415          # reclaim 'shrubery' now (?)
>>> x = [1,2,3]         # reclaim 3.1415 now (?)
