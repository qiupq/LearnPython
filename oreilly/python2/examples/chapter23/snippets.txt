# see setwrapper.py

# see typesubclass.py

# see setsubclass.py

# see private.py




>>> class A:      attr = 1             # classic
>>> class B(A):   pass
>>> class C(A):   attr = 2
>>> class D(B,C): pass                 # tries A before C
>>> x = D()
>>> x.attr
1




>>> class A(object): attr = 1          # new style
>>> class B(A):      pass
>>> class C(A):      attr = 2
>>> class D(B,C):    pass              # tries C before A
>>> x = D()
>>> x.attr
2




>>> class A:      attr = 1            # classic
>>> class B(A):   pass
>>> class C(A):   attr = 2
>>> class D(B,C): attr = C.attr       # choose C, to the right
>>> x = D()
>>> x.attr                            # works like new style
2




>>> class A(object): attr = 1         # new style
>>> class B(A):      pass
>>> class C(A):      attr = 2
>>> class D(B,C):    attr = B.attr    # choose A.attr, above
>>> x = D()
>>> x.attr                            # works like classic
1




>>> class A:
...     def meth(s): print 'A.meth'
>>> class C(A):
...     def meth(s): print 'C.meth'
>>> class B(A): 
...     pass

>>> class D(B,C): pass               # use default search order
>>> x = D()                          # will vary per class type
>>> x.meth()                         # defaults to classic order
A.meth

>>> class D(B,C): meth = C.meth      # pick C's method: new style
>>> x = D()
>>> x.meth()
C.meth

>>> class D(B,C): meth = B.meth      # pick B's method: classic
>>> x = D()
>>> x.meth()
A.meth




>>> class limiter(object):
...     __slots__ = ['age', 'name', 'job']
	
>>> x = limiter()
>>> x.age                     # must assign before use
AttributeError: age

>>> x.age = 40
>>> x.age
40
>>> x.ape = 1000              # illegal: not in slots
AttributeError: 'limiter' object has no attribute 'ape'




>>> class classic:
...     def __getattr__(self, name):
...         if name == 'age':
...             return 40
...         else:
...             raise AttributeError
...	
>>> x = classic()
>>> x.age                                    # runs __getattr__
40
>>> x.name                                   # runs __getattr__
AttributeError




>>> class newprops(object):
...     def getage(self):
...         return 40
...     age = property(getage, None, None, None)      # get,set,del,docs
... 
>>> x = newprops()
>>> x.age                                    # runs getage
40
>>> x.name                                   # normal fetch
AttributeError: newprops instance has no attribute 'name'




>>> class newprops(object):
...     def getage(self):
...         return 40
...     def setage(self, value):
...         print 'set age:', value
...         self._age = value
...     age = property(getage, setage, None, None)
...
>>> x = newprops()
>>> x.age                     # runs getage
40
>>> x.age = 42                # runs setage 
set age: 42
>>> x._age                    # normal fetch,  no getage call
42
>>> x.job = 'trainer'         # normal assign, no setage call
>>> x.job                     # normal fetch,  no getage call
'trainer'




>>> class classic:
...     def __getattr__(self, name):            # on undefined reference
...         if name == 'age':
...             return 40
...         else:
...             raise AttributeError
...     def __setattr__(self, name, value):     # on all assignments
...         print 'set:', name, value
...         if name == 'age':
...             self.__dict__['_age'] = value
...         else:
...             self.__dict__[name] = value
...
>>> x = classic()
>>> x.age                     # runs __getattr__
40
>>> x.age = 41                # runs __setattr__
set: age 41
>>> x._age                    # defined: no __getattr__ call
41
>>> x.job = 'trainer'         # runs __setattr__ again
>>> x.job                     # defined: no __getattr__ call




>>> class X:
...     a = 1        # class attribute
...
>>> I = X()
>>> I.a              # inherited by instance
1
>>> X.a
1


>>> X.a = 2          # may change more than X
>>> I.a              # I changes too
2
>>> J = X()          # J inherits from X's runtime values
>>> J.a              # (but assigning to J.a changes a in J, not X or I)
2


class X: pass                          # make a few attribute namespaces
class Y: pass

X.a = 1                                # use class attributes as variables
X.b = 2                                # no instances anywhere to be found
X.c = 3
Y.a = X.a + X.b + X.c

for X.i in range(Y.a): print X.i       # prints 0..5


class Record: pass
X = Record()
X.name = 'bob'
X.job  = 'Pizza maker'




class Lister:
    def __repr__(self): ...
    def other(self): ...

class Super:
    def __repr__(self): ...
    def other(self): ...

class Sub(Lister, Super):  # get Lister's __repr__, by listing it first
    other = Super.other    # but explicitly pick Super's version of other  
    def __init__(self): 
        ... 

x = Sub()




def printNumInstances():
    print "Number of instances created: ", Spam.numInstances

class Spam:
    numInstances = 0
    def __init__(self):
        Spam.numInstances = Spam.numInstances + 1

>>> import spam
>>> a = spam.Spam()
>>> b = spam.Spam()
>>> c = spam.Spam()
>>> spam.printNumInstances()
Number of instances created:  3
>>> spam.Spam.numInstances
3




class Spam:
    numInstances = 0
    def __init__(self):
        Spam.numInstances = Spam.numInstances + 1
    def printNumInstances(self):
        print "Number of instances created: ", Spam.numInstances

>>> from spam import Spam
>>> a, b, c = Spam(), Spam(), Spam()
>>> a.printNumInstances()
Number of instances created:  3
>>> b.printNumInstances()
Number of instances created:  3
>>> Spam().printNumInstances()
Number of instances created:  4




class Multi:
    def imeth(self, x):          # normal instance method
        print self, x
    def smeth(x):                # static: no instance passed
        print x
    def cmeth(cls, x):           # class: gets class, not instance
        print cls, x
    smeth = staticmethod(smeth)  # make smeth a static method
    cmeth = classmethod(cmeth)   # make cmeth a class method

>>> obj = Multi()              # make an instance
>>> obj.imeth(1)               # normal call, through instance
<__main__.Multi instance…> 1
>>> Multi.imeth(obj, 2)        # normal call, though class
<__main__.Multi instance…> 2

>>> Multi.smeth(3)             # static call, though class
3
>>> obj.smeth(4)               # static call, through instance
4

>>> Multi.cmeth(5)             # class call, through class
__main__.Multi 5
>>> obj.cmeth(6)               # class call, through instance
__main__.Multi 6




class Spam:
    numInstances = 0
    def __init__(self):
        Spam.numInstances += 1
    def printNumInstances():
        print "Number of instances:", Spam.numInstances
    printNumInstances = staticmethod(printNumInstances)

>>> a = Spam()
>>> b = Spam()
>>> c = Spam()
>>> Spam.printNumInstances()
Number of instances: 3
>>> a.printNumInstances()
Number of instances: 3




def generate():
    class Spam:
        count = 1
        def method(self):        # name Spam not visible:
            print Spam.count     # not local(def),global(module),built-in
    return Spam()

generate().method()

C:\python\examples> python nester.py
Traceback (innermost last):
  File "nester.py", line 8, in ?
    generate().method()
  File "nester.py", line 5, in method
    print Spam.count             # not local(def),global(module), built-in
NameError: Spam




def generate():
    global Spam                 # force Spam to module scope
    class Spam:
        count = 1
        def method(self):
            print Spam.count    # works: in global (enclosing module)
    return Spam()

generate().method()             # prints 1




def generate():
    return Spam()

class Spam:                    # define at module top-level
    count = 1
    def method(self):
        print Spam.count       # works: in global (enclosing module)

generate().method()




def generate():
    class Spam:
        count = 1
        def method(self):
            print self.__class__.count       # works: qualify to get class
    return Spam()

generate().method()




class Lunch:
    def __init__(self)         # make/embed Customer and Employee
    def order(self, foodName)  # start a Customer order simulation
    def result(self)           # ask the Customer what kind of Food it has

class Customer:
    def __init__(self)                        # initialize my food to None
    def placeOrder(self, foodName, employee)  # place order with an Employee
    def printFood(self)                       # print the name of my food

class Employee:
    def takeOrder(self, foodName)    # return a Food, with requested name

class Food:
    def __init__(self, name)         # store food name 




>>> from zoo import Cat, Hacker
>>> spot = Cat()
>>> spot.reply()              # Animal.reply, calls Cat.speak
meow
>>> data = Hacker()           # Animal.reply, calls Primate.speak
>>> data.reply()
Hello world!




>>> import parrot
>>> parrot.Scene().action()       # activate nested objects
customer: "that's one ex-bird!"
clerk: "no it isn't..."
parrot: None

